%% Load datastore
mms.db_init('local_file_db','/Volumes/Fountain/Data/MMS/');
db_info = datastore('mms_db');   
localuser = datastore('local','user');

units = irf_units;
doSave = 1;
doPrint = 1;

events = 1:20;
nevents = numel(events);
loadAccPotPath = ['/Users/' localuser '/MATLAB/cn-matlab/+sep/acc_potential_new/'];
saveAccPotPath = ['/Users/' localuser '/MATLAB/cn-matlab/+sep/acc_potential_new_rerun/'];
printAccPotPath = ['/Users/' localuser '/GoogleDrive/Research/Separatrix_acceleration_events/acceleration_potential/'];

allEvents = 1:nevents;
okEvents = [1 5 8];
badEvents = setdiff(allEvents,okEvents);

results = struct();

%% Make/compile phi statistics
% All events have slightly different conditions for finding the most
% distinct beam. For example spacecraft, psd threshhold (10%/20%).
% All reduced distributions are saved to file, see get_acc_pot_new_rerun.m.
% Run through them all and just specify the conditions we want, and pick
% out the value.

events = 1:20;
nEvents = numel(events);
phi_all = zeros(nEvents,1);

countEvent = 0;

for iEvent = [1 3:19]%:nEvents
  countEvent = countEvent + 1;
  event = events(iEvent); % set event id
  sep.get_tints; % get tints for that event id  
  % adjust tint_phi below, to get proepr interval
  
  %% Load saved acc data
  load(sprintf('%s/acc_pot_data_event_%g',loadAccPotPath,event),'acc_pot_data'); % acc_pot_data
  tint_dist = acc_pot_data.ef1D_orig{1}.time([1 end]);
  fields = fieldnames(acc_pot_data);
  for ifield = 1:numel(fields)
    eval(sprintf('%s = acc_pot_data.(''%s'');',fields{ifield},fields{ifield}))
  end
  
  Te_sheet = (Tepar_sheet + 2*Teperp_sheet)/3;
  vte_sheet = sqrt(2*units.eV*Te_sheet/units.me);
  
  Te_lobe = (Tepar_lobe + 2*Teperp_lobe)/3;  
  vte_lobe = sqrt(2*units.eV*Te_lobe/units.me);
  f_lobe = 1e6*n_lobe/sqrt(pi)/vte_lobe; % sm^-4
  
  % Pick out reconnection quadrant: tail, Earth to the left
  quadrant = ones(2,2);  
  if vix > 0; quadrant(:,2) = 0; else quadrant(:,1) = 0; end      
  if bix > 0; quadrant(2,:) = 0; else quadrant(1,:) = 0; end
   
  eint = [000 40000];
  
  %% Select what parameters to go with
  switch iEvent
    case 1
      % all are ok
      cond.ic = 4;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.dist = ef1D_nobg{cond.ic};
      cond.flow = 0.2; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 3000; 
      cond.eint = eint;
    case 2
      % really small drift, consider removing
      cond.ic = 4;
      cond.dist = ef1D_nobg{cond.ic};
      cond.flow = 0.2; % 20% of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 3000; 
      cond.eint = eint;
    case 3
      % beam is nice (example event), but threshold of 20% is too high 
      cond.ic = 1;
      cond.tint_phi = tint_phi + [0 0.5];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.11; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 10000; 
      cond.eint = eint;
    case 4
      % beam is nice
      cond.ic = 1;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.18; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 10000; 
      cond.eint = eint;
    case 5
      % all are ok
      % 2 and 4 are slightly higher, but 1 and 3 are less wobbly
      cond.ic = 2;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.2; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 3000; 
      cond.eint = eint;      
    case 6
      cond.ic = 3;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.2; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 3000; 
      cond.eint = eint;   
    case 7
      cond.ic = 3;
      cond.tint_phi = tint_phi + 0.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.05; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 7000; 
      cond.eint = eint;   
    case 8
      cond.ic = 1;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.2; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;       
    case 9
      cond.ic = 4;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.11; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 10
      cond.ic = 1;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.18; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 11
      cond.ic = 1;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.25; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 12
      cond.ic = 1;
      cond.tint_phi = tint_phi + 0.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.10; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 13
      cond.ic = 2;
      cond.tint_phi = tint_phi + 0.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.10; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 14
      cond.ic = 2;
      cond.tint_phi = tint_phi + 0.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.10; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 15
      cond.ic = 2;
      cond.tint_phi = tint_phi + 0.0*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.15; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 16
      cond.ic = 1;
      cond.tint_phi = tint_phi + 0.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.15; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 17
      cond.ic = 3;
      cond.tint_phi = tint_phi + 0.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.2; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 18
      cond.ic = 4;
      cond.tint_phi = tint_phi + 0.1*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.1; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 19
      cond.ic = 3;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.1; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
    case 20 % consider removing due to low fbeam
      cond.ic = 4;
      cond.tint_phi = tint_phi + 1.5*[-1 1];
      cond.dist = tlim(ef1D_nobg{cond.ic},cond.tint_phi);
      cond.flow = 0.1; % percentage of f_lobe  
      cond.minpeakheight = f_lobe*cond.flow;
      cond.minpeakprominence = 0.5*cond.minpeakheight;
      cond.vlow = 5000; 
      cond.eint = eint;  
  end

  
  % set parallel velocity to incude in interval
  if any(quadrant([1 4])) % top left or bottom right, inflow is antiparallel to B
    vint = [-100000 -cond.vlow];
  else  % top right or bottom left, inflow is parallel to B
    vint = [cond.vlow 100000];
  end
  cond.vint = vint;
  cond.resample_timestep = 3;
  cond.vte_sheet = vte_sheet*1e-3;
  cond.vte_lobe = vte_lobe*1e-3;
  cond.f_lobe = f_lobe;
  cond.Te_lobe = Te_lobe;
  cond.Te_sheet = Te_sheet;
  cond.be_lobe = be_lobe;
  
  %% Find beam
  figure(21)
  [tmpTsAccPot,tmppPeakF] = find_acc_pot(cond.dist,...
    'eint',cond.eint,...
    'vint',cond.vint,...
    'minpeakheight',cond.minpeakheight,... % fraction of f_lobe
    'minpeakprominence',cond.minpeakprominence,... % smaller fraction of f_lobe
    'resample',cond.resample_timestep);
  % Collect data
  cond.ts_acc_pot = tmpTsAccPot;
  cond.peakF = tmppPeakF;
  % Adjust figure and print
  if 1
    climfraction = [0.01 1];
    clim = climfraction*f_lobe;
    hcf = gcf;
    hcf.Position = [0 100 700 800];
    h = findobj(hcf.Children,'type','axes');
    c_eval('irf_pl_mark(h(?),tint_phi,''r'');',1:numel(h))
    c_eval('h(?).CLim = log10(clim);',2:3)
    %cn.print(sprintf('event%g_tsAccPot%g_orig',event,iic),'path',printAccPotPath)    
  end
  
  %% Collect results
  results(countEvent).iEvent = iEvent;
  fields = fieldnames(cond);
  for ifield = 1:numel(fields)
    results(countEvent).(fields{ifield}) = cond.(fields{ifield});
  end
  
  
end

%% Plot all beams and statistics
ebeam = [cellfun(@(x) ( x.ebeam ), {results(:).peakF}, 'UniformOutput', false)]; ebeam = [ebeam{:}];
vbeam = [cellfun(@(x) ( x.vbeam ), {results(:).peakF}, 'UniformOutput', false)]; vbeam = [vbeam{:}];
fbeam = [cellfun(@(x) ( x.fbeam ), {results(:).peakF}, 'UniformOutput', false)]; fbeam = [fbeam{:}];

betalobe = [results.be_lobe];
flobe = [results.f_lobe];
vtelobe = [results.vte_lobe];
vtesheet = [results.vte_sheet];

figure(22)
h = setup_subplots(3,3);
isub = 1;

if 1 % ebeam vs beta_lobe
  hca = h(isub); isub = isub + 1;
  plot(hca,betalobe,abs(ebeam),'o')
  hca.XLabel.String = '\beta_{lobe}';
  hca.YLabel.String = 'E_{beam}';
end
if 1 % ebeam vs beta_lobe
  hca = h(isub); isub = isub + 1;
  scatter(hca,betalobe,abs(ebeam),1e3*fbeam./flobe)
  hca.XLabel.String = '\beta_{lobe}';
  hca.YLabel.String = 'E_{beam}';
end
if 0 % fbeam/flobe vs vbeam/vtesheet
  hca = h(isub); isub = isub + 1;
  plot(hca,(abs(vbeam)./vtesheet)',(fbeam./flobe)','o')
  hca.XLabel.String = '|v_{beam}|/v_{te,sheet}';
  hca.YLabel.String = 'f_{beam}/f_{lobe}';
end
if 1 % f/flobe vs v/vtesheet
  hca = h(isub); isub = isub + 1;
  for ir = 1:numel(results)
    if results(ir).peakF.vbeam<0
      plot(hca,-results(ir).peakF.v/results(ir).vte_sheet,results(ir).peakF.f_orig/results(ir).f_lobe)
    else
      plot(hca,results(ir).peakF.v/results(ir).vte_sheet,results(ir).peakF.f_orig/results(ir).f_lobe)
    end
    if ir == 1
      hold(hca,'on')
    end
  end
  hold(hca,'off')
  hca.XLabel.String = 'v/v_{te,sheet}';
  hca.YLabel.String = 'f/f_{lobe}';
  hca.YLim(2) = 0.4;
end
if 1 % f/flobe vs v/vtesheet, remove all below 100 eV
  hca = h(isub); isub = isub + 1;
  for ir = 1:numel(results)
    if results(ir).peakF.vbeam<0
      xx = results(ir).peakF.v;
    else
      xx = results(ir).peakF.v;
    end
    yy = results(ir).peakF.f_orig/results(ir).f_lobe;
    yy = results(ir).peakF.f_orig/fbeam(ir);
    xlim = 6500;
    yy(abs(xx)<xlim) = NaN;
    plot(hca,xx/vbeam(ir),yy)
    %plot(hca,xx/vbeam(ir),yy)
    if ir == 1
      hold(hca,'on')
    end
  end
  hold(hca,'off')
  hca.XLabel.String = 'v/v_{te,sheet}';
  hca.YLabel.String = 'f/f_{lobe}';
  %hca.YLim(2) = 0.4;
end
if 1 % f/flobe vs v/vbeam, remove all below 100 eV
  hca = h(isub); isub = isub + 1;
  colors = colormap('parula');
  colors = interp1(1:size(colros()));
  for ir = 1:numel(results)
    if results(ir).peakF.vbeam<0
      xx = results(ir).peakF.v;
    else
      xx = results(ir).peakF.v;
    end
    yy = results(ir).peakF.f_orig/results(ir).f_lobe;
    %yy = results(ir).peakF.f_orig/fbeam(ir);
    xlim = 6500;
    yy(abs(xx)<xlim) = NaN;
    plot(hca,xx/vbeam(ir),yy)
    %plot(hca,xx/vbeam(ir),yy)
    if ir == 1
      hold(hca,'on')
    end
  end
  hold(hca,'off')
  hca.XLabel.String = 'v/v_{beam}';
  hca.YLabel.String = 'f/f_{lobe}';
  %hca.YLim(2) = 0.4;
  hca.XLim = [-2 2];
end
if 1 % f/flobe vs v/vsheet, remove all below 100 eV
  hca = h(isub); isub = isub + 1;
  for ir = 1:numel(results)
    if results(ir).peakF.vbeam<0
      xx = -results(ir).peakF.v;
    else
      xx = results(ir).peakF.v;
    end
    yy = results(ir).peakF.f_orig/results(ir).f_lobe;
    %yy = results(ir).peakF.f_orig/fbeam(ir);
    xlim = 6500;
    yy(abs(xx)<xlim) = NaN;
    plot(hca,xx/vtesheet(ir),yy)
    %plot(hca,xx/vbeam(ir),yy)
    if ir == 1
      hold(hca,'on')
    end
  end
  hold(hca,'off')
  hca.XLabel.String = 'v/v_{te,sheet}';
  hca.YLabel.String = 'f/f_{lobe}';
  %hca.YLim(2) = 0.4;
  hca.XLim = [-2 2];
end
if 1 % f/flobe vs v/vlobe, remove all below 100 eV
  hca = h(isub); isub = isub + 1;
  for ir = 1:numel(results)
    if results(ir).peakF.vbeam<0
      xx = -results(ir).peakF.v;
    else
      xx = results(ir).peakF.v;
    end
    yy = results(ir).peakF.f_orig/results(ir).f_lobe;
    %yy = results(ir).peakF.f_orig/fbeam(ir);
    xlim = 6500;
    yy(abs(xx)<xlim) = NaN;
    plot(hca,xx/vtelobe(ir),yy)
    %plot(hca,xx/vbeam(ir),yy)
    if ir == 1
      hold(hca,'on')
    end
  end
  hold(hca,'off')
  hca.XLabel.String = 'v/v_{te,lobe}';
  hca.YLabel.String = 'f/f_{lobe}';
  %hca.YLim(2) = 0.4;
  hca.XLim = [-8 8];
end
if 0 % f/flobe vs v/vbeam
  hca = h(isub); isub = isub + 1;
  for ir = 1:numel(results)    
    plot(hca,results(ir).peakF.v/vbeam(ir),results(ir).peakF.f_orig/results(ir).f_lobe)        
    if ir == 1
      hold(hca,'on')
    end
  end
  hold(hca,'off')
  hca.XLabel.String = 'v/v_{te,sheet}';
  hca.YLabel.String = 'f/f_{lobe}';
end
if 1 % f/flobe vs v/vbeam
  hca = h(isub); isub = isub + 1;
  for ir = 1:numel(results)        
    plot(hca,results(ir).peakF.v/vbeam(ir),results(ir).peakF.f_orig/fbeam(ir))    
    if ir == 1
      hold(hca,'on')
    end
  end
  hold(hca,'off')
  hca.XLabel.String = 'v/v_{beam}';
  hca.YLabel.String = 'f/f_{beam}';
end
if 0 % f/flobe vs E/Tsheet
  hca = h(isub); isub = isub + 1;
  for ir = 1:numel(results)
    if results(ir).peakF.vbeam<0
      semilogy(hca,sqrt(-results(ir).peakF.v/results(ir).vte_sheet),results(ir).peakF.f_orig/results(ir).f_lobe)
    else
      semilogy(hca,sqrt(results(ir).peakF.v/results(ir).vte_sheet),results(ir).peakF.f_orig/results(ir).f_lobe)
    end
    if ir == 1
      hold(hca,'on')
    end
  end
  hold(hca,'off')
  hca.XLabel.String = 'v/v_{te,sheet}';
  hca.YLabel.String = 'f/f_{lobe}';
end