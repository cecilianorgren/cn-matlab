function waves(action)
% Integration of dispersive waves in time.


% The initial and time-consuming work on this file was
% done by Daniel Noreland 991212. Modifications in order
% to make the program fit the Fluid dynamics course
% were made by Bengt Eliasson 011011.

% The axes for graph
  xmin=-10.0;
  xmax=10.0;
  
if nargin<1

  fig=gcf;
  clf

  WinColor=[.5 .5 .5];
  set(gcf,'Name','Integration of dispersive waves');
  set(gcf,'Color',WinColor);

  %1
  ax1=axes('Position',[.075 .45 .85 .5]);
  axes(ax1)

  axis([xmin xmax -1 1]);
  
  %8
  animate1=-1;

  ekvtext=uicontrol(gcf,...
      'Style','text',...
      'Units','normalized',...
      'BackgroundColor',WinColor,...
      'FontSize',12,...
      'HorizontAlalignment','right',...
      'Position',[0.0 .28 .25 .075],...
      'string','Dispersion, w(k)=');

  %2
  edit1=uicontrol(gcf,...
      'Style','edit',...
      'Backgroundcolor',[.8 .8 .8],...
      'Units','normalized',...
      'FontSize',12,...
      'HorizontAlalignment','left',...
      'Position',[.25 .3 .45 .075],...
      'string','k',...
      'CallBack','');

  metodtext=uicontrol(gcf,...
      'Style','text',...
      'Units','normalized',...
      'BackgroundColor',WinColor,...
      'FontSize',12,...
      'HorizontAlalignment','right',...
      'Position',[0.0 .18 .25 .075],...
      'string','Initial function, f0(x)=');

  %3
    edit4=uicontrol(gcf,...
      'Style','edit',...
      'Background',[.8 .8 .8],...
      'FontSize',12,...
      'Units','normalized',...
      'HorizontAlalignment','left',...
      'Position',[.25 .2 .45 .075],...
      'string','exp(-x^2)',...
      'CallBack','');
  
%  popup1=uicontrol(gcf,...
%      'Style','popupmenu',...
%      'Backgroundcolor',[.8 .8 .8],...
%      'FontSize',12,...
%      'Units','normalized',...
%      'Position',[.2 .2 .25 .075],...
%      'String','Euler fram?t|Euler bak?t|Trapetsmetoden|Heuns metod|Runge-Kutta|Exakt');

  %4
    sli1=uicontrol(gcf,...
      'Style','slider',...
      'Backgroundcolor',[.8 .8 .8],...
      'Units','normalized',...
      'Position',[.2 .1 .4 .075],...
      'Min',0,'Max',20,...
      'Value',0,...
      'CallBack','waves(''hSetSolve2'')');

%  bvtext=uicontrol(gcf,...
%      'Style','text',...
%      'Units','normalized',...
%      'BackgroundColor',WinColor,...
%      'FontSize',12,...
%      'HorizontAlalignment','right',...
%      'Position',[0.5 .28 .1 .075],...
%      'string','y(x0)=');

  %5
  edit2=0;
%  edit2=uicontrol(gcf,...
%      'Style','edit',...
%      'Background',[.8 .8 .8],...
%      'FontSize',12,...
%      'Units','normalized',...
%      'Position',[.6 .3 .1 .075],...
%      'string','exp(-x*x)',...
%      'CallBack','');

  htext=uicontrol(gcf,...
      'Style','text',...
      'Units','normalized',...
      'BackgroundColor',WinColor,...
      'FontSize',12,...
      'HorizontAlalignment','right',...
      'Position',[0.0 .073 .15 .075],...
      'string','Time:');
  
  endtime=uicontrol(gcf,...
      'Style','text',...
      'Units','normalized',...
      'BackgroundColor',WinColor,...
      'FontSize',12,...
      'HorizontAlalignment','right',...
      'Position',[0.42 .0 .15 .075],...
      'string','End time:');
  %6
  text1=uicontrol(gcf,...
      'Style','edit',...
      'Backgroundcolor',[.8 .8 .8],...
      'FontSize',12,...
      'Units','normalized',...
      'Position',[.6 .1 .15 .075],...
      'string',[num2str(get(sli1,'Value'))],...
      'CallBack','waves(''hSetSolve'')');

  %7
  edit3=uicontrol(gcf,...
      'Style','edit',...
      'Backgroundcolor',[.8 .8 .8],...
      'FontSize',12,...
      'Units','normalized',...
      'Position',[.6 .02 .15 .075],...
      'string',[num2str(get(sli1,'Max'))],...
      'CallBack','waves(''hSetSolve'')');

  
  button1=uicontrol(gcf,...
      'Style','push', ...
      'Units','normalized', ...
      'Backgroundcolor',[.8 .8 .8],...
      'String','Solve', ...
      'Position',[0.8 0.3 0.15 0.075], ...
      'Callback','waves(''Solve'')');

  abutton=uicontrol(gcf,...
      'Style','push', ...
      'Units','normalized', ...
      'Backgroundcolor',[.8 .8 .8],...
      'String','Start animation', ...
      'Position',[0.8 0.22 0.15 0.075], ...
      'Callback','waves(''Animate'')');
  
    abutton2=uicontrol(gcf,...
      'Style','push', ...
      'Units','normalized', ...
      'Backgroundcolor',[.8 .8 .8],...
      'String','Stop animation', ...
      'Position',[0.8 0.14 0.15 0.075], ...
      'Callback','waves(''StopAnimate'')');

  closebutton=uicontrol(gcf,...
      'Style','push', ...
      'Units','normalized', ...
      'Backgroundcolor',[.8 .8 .8],...
      'String','Close', ...
      'Position',[0.8 0.0 0.15 0.075], ...
      'Callback','close(gcf)');

  menu1=uimenu('Label','Egenskaper');
  uimenu(menu1,'Label','Flera kurvor','CallBack','hold on');
  uimenu(menu1,'Label','En kurva','CallBack','hold off');
  uimenu(menu1,'Label','Rensa','CallBack','cla reset');
  uimenu(menu1,'Label','Zoom','CallBack','zoom on');
  
  set(fig,'UserData',[ax1,edit1,edit4,sli1,edit2,text1,edit3,animate1]);

  % Draw the initial curve
  waves('Solve');
  
else
  if strcmp(action,'Solve')
    Solve(gcf,xmin,xmax);
  elseif strcmp(action,'hSetSolve')
    handles=get(gcf,'UserData');
    sli1=handles(4);
    text1=handles(6);
    edit3=handles(7);
 
    endtime=str2num(get(edit3,'string'));
    if endtime>0.001
       set(sli1,'Max',endtime);
       set(sli1,'Value',0);
    else
       set(sli1,'Max',0.001);
       set(sli1,'Value',0);
       set(edit3,'String',num2str(0.001));
    end
    
    h=str2num(get(text1,'string'));
   
    if h<0
      oldh=get(sli1,'Value');
      set(text1,'String',num2str(0.0));
      set(sli1,'Value',0.0);
      Solve(gcf,xmin,xmax);
    elseif h>=0 & h<=endtime
      set(sli1,'Value',h);
      Solve(gcf,xmin,xmax);
    else
      set(sli1,'Value',endtime);
      set(text1,'String',num2str(endtime))
      Solve(gcf,xmin,xmax);
    end
  elseif strcmp(action,'hSetSolve2')
    handles=get(gcf,'UserData');
    sli1=handles(4);
    text1=handles(6);
    edit3=handles(7);
    h=get(sli1,'Value');
    endtime=str2num(get(edit3,'string'));
    if h<=0
      oldh=str2num(get(text1,'String'));
      set(text1,'String',num2str(0.0))
      set(sli1,'Value',0.0);
      Solve(gcf,xmin,xmax);
    elseif h>=0 & h<=endtime
      set(text1,'String',num2str(h));
      Solve(gcf,xmin,xmax);
    else
      oldh=str2num(get(text1,'String'));
      set(sli1,'Value',oldh)
      Solve(gcf,xmin,xmax);
    end
  elseif strcmp(action,'Animate')
    handles=get(gcf,'UserData');
    
    % Set animation flag
    animate1=1;
    handles(8)=animate1;
    set(gcf,'UserData',handles)
    
    sli1=handles(4);
    text1=handles(6);
    dtime=get(sli1,'Max')/100;
    j=0;
    while (j <= 100) & (animate1 == 1)
       set(sli1,'Value',j*dtime);
       set(text1,'String',num2str(j*dtime));
       Solve(gcf,xmin,xmax);
       pause(0.2);
       %xx=getframe;
       %movie(xx);
       
       j=j+1;
       
       % Check animation flag
       handles=get(gcf,'UserData');
       animate1=handles(8);
    end 
  elseif strcmp(action,'StopAnimate')
    % Reset animation flag
    handles=get(gcf,'UserData');
    handles(8)=0;
    set(gcf,'UserData',handles);
  end
end

function Solve(fig,xmin,xmax)

handles=get(fig,'UserData');
ax1=handles(1);
edit1=handles(2);
edit3=handles(3);
sli1=handles(4);
edit2=handles(5);
text1=handles(6);

axes(ax1);
% cla
funcstr=get(edit3,'String');
dispstr=get(edit1,'String');
% method=get(popup1,'Value');
time=get(sli1,'Value');

    linecolor='r';
    marker=[];
    N=512;
    h=(xmax-xmin)/N;
    y=zeros(1,N);
    x_vec=linspace(xmin,xmax,N);
    for j=1:N
      x=xmin+(j-1)*h;
      y(j)=eval(funcstr);
    end
    
    yF=zeros(1,N);
    yF(1:N/2)=y(N/2+1:N);
    yF(N/2+1:N)=y(1:N/2);
    
    % The Fourier transform of the initial condition
    yF=fft(yF);
    
    % Dispersion applied here...
    dk=2*pi/(xmax-xmin);
    for j=1:N/2
      k=(j-1)*dk;
      omegat=time*eval(dispstr);
      yF(j)=yF(j)*exp(-i*omegat);
    end
    for j=1:N/2
      k=-j*dk;
      omegat=time*eval(dispstr);
      yF(N+1-j)=yF(N+1-j)*exp(-i*omegat);
    end
    
    % Transform back the real solution
    yF=ifft(yF);
    y(1:N/2)=real(yF(N/2+1:N));
    y(N/2+1:N)=real(yF(1:N/2));
    
p1=plot(x_vec,y,linecolor);
set(p1,'LineWidth',1);
axis([xmin xmax -1 1]);



