function [x y z correlation PhiE Bz Ek En ufEn ufEk] = tool_direction(B,E,tries,f)
%  IRF_MATCH_PHIB
% 
% Tries different propagation directions and finds the direction 
% perpendicular to the magnetic field that gives the best correlation
% between the electrostatic potential and the parallel wave magnetic field
% according to phi_E = waveB*B0/n*e*mu0
%
% Input 
%       B - magnetic field (to be filtered if f is given)
%       E - electric field (to be filtered if f is given)
%       n_tries - number of directions to try, 1 degree separation default
%       f - filter frequency
% 
% Returns 
%       x - normal direction (size: n_tries x 3)
%       y - propagation direction
%       z - magnetic field direction.
%       correlation vector
%       potential
%       wave B_par
%

% Resample B to E if they have different size
if size(B,1) ~= size(E,1)
    B=irf_resamp(B,E);
end

% Filter if f is given, otherwise assume it is filtered
if exist('f','var') 
    BAC=irf_filt(B,f,0,450,5);
    EAC=irf_filt(E,f,0,450,5);
else
    BAC=B;
    EAC=E;
end

% If no number of tries is specified, set 100 as default
if ~exist('tries','var') 
    tries=180;
end

% Set up coordinate systems
if 1
    z=repmat(irf_norm(mean(B(:,2:4),1)),tries,1); % B/z direction, tries*3
    y=irf_norm(irf_cross(irf_cross(z,[1 0 0]),z)); % perp1
    x=irf_norm(irf_cross(y,z)); % perp2
    
    theta=(0:2*pi/tries:2*pi-pi/tries)'; % angles
    xn=irf_norm(x.*repmat(cos(theta),1,3)+y.*repmat(sin(theta),1,3));
    y=irf_cross(z,xn);
    x=xn;
end
    
% Field aligned B
Bz=irf_dot(BAC,z(1,:));

% Allocate correlations
correlation=zeros(tries,1);

% Allocate vectors
Ek=[EAC(:,1) zeros(size(E,1),tries)]; % field to integrate
En=[EAC(:,1) zeros(size(E,1),tries)]; % normal field
ufEk=[E(:,1) zeros(size(E,1),tries)]; % unfiltered
ufEn=[E(:,1) zeros(size(E,1),tries)]; % unfiltered
PhiE=[EAC(:,1) zeros(size(E,1),tries)]; % potential

% Integrate E in all x-directions
for k=1:tries   
    Ek(:,k+1)=irf_dot(EAC(:,(2:4)),x(k,:));
    En(:,k+1)=irf_dot(EAC(:,(2:4)),y(k,:));    
    ufEk(:,k+1)=irf_dot(E(:,(2:4)),x(k,:));
    ufEn(:,k+1)=irf_dot(E(:,(2:4)),y(k,:));
    
    % Get Phi_E = int(Ek), there's no minus since the field is integrated
    % in the opposite direction of the wave propagation direction.
    intE=irf_integrate([EAC(:,1) Ek(:,k+1)]);    
    PhiE(:,k+1)=intE(:,2)-mean(intE(:,2));
       
    % Get correlation
    correlation(k,1)=xcorr(PhiE(:,k+1),Bz(:,2),0,'coeff');    
end