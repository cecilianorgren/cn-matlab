%% Specify time and spacecraft
units = irf_units;
irf.log('critical')
ic = 2;

mms.db_init('local_file_db','/Volumes/Fountain/Data/MMS');
db_info = datastore('mms_db');   
localuser = datastore('local','user');
tint_all = irf.tint('2017-01-01T00:00:00.00Z/2018-01-01T00:00:00.00Z');
files = mms.db_list_files('mms1_fgm_brst_l2',tint_all);

% Time from time interval
%tint = irf.tint('2017-06-22T03:01:03.00Z/2017-06-22T03:01:43.00Z');

% Time from file name
fileId = '20170709171633'; %tint = [files(iFile-1).start files(iFile).stop] + [1 -1]; % also load the file before
%fileId = '20170709173053';
fileId = '20170611173913';

%fileId = '20170724125513';
fileId = '20170725220853';
%fileId = '20170726065803';
%fileId = '20170728200013'; %two front with 2 density decrease

iFile = find(cellfun(@(s) contains(s,fileId),{files.name}));
tint = [files(iFile-1).start files(iFile).stop] + [1 -1];



% Event path
eventPath = ['/Users/' localuser '/Research/Events/mms_' fileId '/']; % for saving figures
%matlabPath = ['/Users/' localuser '/MATLAB/cn-matlab/mms_' fileID '/'];
mkdir(eventPath)

%% Load data
c_eval('dmpaB? = mms.db_get_ts(''mms?_fgm_brst_l2'',''mms?_fgm_b_dmpa_brst_l2'',tint);',ic);
c_eval('ne? = mms.get_data(''Ne_fpi_brst_l2'',tint,?);',ic);
c_eval('ni? = mms.get_data(''Ni_fpi_brst_l2'',tint,?);',ic);
c_eval('gseVe? = mms.get_data(''Ve_gse_fpi_brst_l2'',tint,?);',ic)
c_eval('gseVi? = mms.get_data(''Vi_gse_fpi_brst_l2'',tint,?);',ic);
c_eval('dbcsVi? = mms.get_data(''Vi_dbcs_fpi_brst_l2'',tint,?);',ic);
c_eval('gsmVe? = c_coord_trans(''GSE'',''GSM'',gseVe?);',ic)
c_eval('gsmVi? = c_coord_trans(''GSE'',''GSM'',gseVi?);',ic)

disp('Preparing reduced distributions.')
vint = [-Inf Inf];
% Cutting off the edge of the distribution allows the maxwellian to go 
% beyond the edge. Otherwise, the obs red distribution is always forced to
% zero due to energy cutoff and spherical skymap.
vg = -2000:50:2000; 
c_eval('if1Dx? = iPDist?.reduce(''1D'',[1 0 0],''vint'',vint,''vg'',vg);',ic)
c_eval('if1Dy? = iPDist?.reduce(''1D'',[0 1 0],''vint'',vint,''vg'',vg);',ic)
c_eval('if1Dz? = iPDist?.reduce(''1D'',[0 0 1],''vint'',vint,''vg'',vg);',ic)

%% Do fit
v = dbcsVi2.y;
vdf = if1Dy2(501:520);
vdf = if1Dy2(1000:1020);
X0 = [0.01e6 -100e3 100e3 0.01e6 1000e3 1000e3]; 
nPop = 2;
tic
[fitdata,ts] = funFitVDF(vdf,'nPop',nPop,'plot',0,'guessprevious',0,'X0',X0);
toc
vfitmaxtot = irf.ts_scalar(ts.n.time,sum(ts.n.data.*ts.vd.data,2)./sum(ts.n.data,2));
%% Plot results from funFitVDF()
h = irf_plot(6);
hca = irf_panel('vdf_obs');
irf_spectrogram(hca,vdf.specrec('velocity'),'log'); colormap(hca,irf_colormap('waterfall')) 
hca.YLabel.String = 'v^{obs} (km/s)';
hca.YLabel.Interpreter = 'tex';

hca = irf_panel('vdf_fit');
irf_spectrogram(hca,ts.f.specrec('velocity'),'log'); colormap(hca,irf_colormap('waterfall'))
hold(hca,'on'); irf_plot(hca,ts.vd); hold(hca,'off'); 
hca.YLabel.String = 'v^{fit} (km/s)';
hca.YLabel.Interpreter = 'tex';

hca = irf_panel('n_fit');
irf_plot(hca,ts.n)
%hold(hca,'on'); hnobs = irf_plot(hca,n0); hold(hca,'off'); 
%irf_legend(hca,'obs',[0.98 0.98],'color',hnobs.Color)
hca.YLabel.String = 'n (cm^{-3})';
hca.YLabel.Interpreter = 'tex';

hca = irf_panel('vd_fit');
irf_plot(hca,ts.vd)
hold(hca,'on'); hvobs = irf_plot(hca,v); hold(hca,'off'); 
hold(hca,'on'); hvfittot = irf_plot(hca,vfitmaxtot); hold(hca,'off'); 
irf_legend(hca,{'obs'},[0.98 0.98],'color',hvobs.Color)
irf_legend(hca,{'obs'},[0.98 0.9],'color',hvfittot.Color)
hca.YLabel.String = 'v (km/s)';

hca = irf_panel('T_fit');
irf_plot(hca,ts.T)
%hold(hca,'on'); hTobs = irf_plot(hca,T0.xx); hold(hca,'off'); 
%irf_legend(hca,'obs',[0.98 0.98],'color',hTobs.Color)
hca.YLabel.String = 'T (eV)';

hca = irf_panel('cf_fit');
irf_plot(hca,ts.cf)

irf_plot_axis_align(h)
hlinks = linkprop([irf_panel('vdf_obs'),irf_panel('vdf_fit')],{'CLim','YLim'});
irf_zoom(h,'x',vdf.time([1 end]))

